// type MyString String;
// type ListOfInt [Int];
// enum Result<OkType, ErrType> {...};
// struct Foo<T> {field_t: T};
// type MyResult Result<String, Int>;
// type FooInt Foo<Int>;

// there are no specs for these alias since the newtype
// mechanism doesn't generate anything for python
type MyString String;
type ListOfInt [Int];
type OptInt Int?;
type WordAssoc Map<String, String>;

struct SimpleFoo {
  simple_field: String
}

type StructCopy SimpleFoo

struct StructWithNewtype {
  field_string: MyString,
  field_optint: OptInt,
}

enum Base {
  A,
  C,
  G,
  T,
}

type OtherBase Base

enum SumWithNewtype {
  Variant(MyString)
}
