struct PolyFoo<T> {
  poly_field: T
}

type FooString PolyFoo<String>
type FooNested PolyFoo<PolyFoo<Int>>

struct MultiFoo<U, V> {
  field_u: U,
  field_v: V
}

type IntString MultiFoo<Int, String>
type IntBytes MultiFoo<Float, Bytes>

enum Result<OkType,ErrType> {
  Ok(OkType),
  Err(ErrType),
}

type MyResult Result<String, Int>
type NestedResult Result<String, [Int?]>
type StructEnum PolyFoo<Result<String, Int>>
